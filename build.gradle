ext {
    dbfitVersion = '2.0.0-RC4'
    commonsCodecVersion = "1.7"
}

task cleanFitnesseroot(type:Exec) {
    executable '/bin/sh'
    args '-c', 'git clean -d -x -f FitNesseRoot/'
}

task cleanDist << {
    delete 'dist'
}

task createDist << {
    mkdir 'dist'
}

def getClassPath(def jarsList, def cpSep, def pathSep, def rootDir) {
    return (jarsList.collect { "${rootDir}${pathSep}${it}" }).join(cpSep)
}

def platforms = [
    unix: [cpSep: ':', pathSep: '/', scriptHeader: '#!/usr/bin/env sh\ncd "`dirname $0`"\n', scriptArgs: '$@', newLine: '\n'],
    windows: [cpSep: ';', pathSep: "\\", scriptHeader: "", scriptArgs: '%1 %2', newLine: '\r\n']]

def genJavaCallScript(def scriptFile, def mainClass, def jarList, def platform) {
    scriptFile.write platform.scriptHeader
    scriptFile << "java -cp " << getClassPath(jarList, platform.cpSep, platform.pathSep, "lib")
    scriptFile << " " << mainClass << " " << platform.scriptArgs << platform.newLine
    ant.chmod(file: scriptFile, perm: "+x")
}

def genCryptoAppScript(def scriptFile, def platform) {
    def mainClass = "dbfit.util.crypto.CryptoApp"
    def jarNames = ["dbfit-core-${dbfitVersion}.jar", "commons-codec-${commonsCodecVersion}.jar"]

    genJavaCallScript(scriptFile, mainClass, jarNames, platform)
}

task genCryptoAppScripts(dependsOn: [createDist]) << {
    genCryptoAppScript(file('dist/cryptoapp.sh'), platforms['unix'])
    genCryptoAppScript(file('dist/cryptoapp.bat'), platforms['windows'])
}

task copyLocal(dependsOn: [cleanFitnesseroot, cleanDist,':dbfit-java:assembleAll', ':dbfit-java:libs', genCryptoAppScripts]) << {
    copy {
        from 'FitNesseRoot'
        into 'dist/FitNesseRoot'
    }
    copy {
        from 'LICENSE', 'README.md', 'bin/startFitnesse.bat', 'bin/startFitnesse.sh'
        into 'dist'
    }
    file('dist/plugins.properties') << 'Theme=bootstrap'
    copy {
        from 'dbfit-java'
        include '**/*.jar'
        exclude 'build/**/*.jar', 'teradata/**/*.jar', '**/ojdbc*.jar'
        into 'dist/lib'
        eachFile {details ->
            details.path = flattenPath(details.path)
        }
        rename { String fileName ->
             fileName.replace('fitnesse-standalone-20130321.jar', 'fitnesse-standalone.jar')
        }
        includeEmptyDirs = false 
    }
}

def flattenPath(def path) {
    path.replaceAll('.*/([^/]*?\\.jar)', {"${it[1]}"})
}

task bundleFitsharp(dependsOn: copyLocal) << {
    mkdir 'dist/fitsharp/'
    ant.get(src: 'http://cloud.github.com/downloads/jediwhale/fitsharp/release.2.2.net.40.zip',
            dest: 'dist/fitsharp/',
            verbose: true)
    copy {
        from zipTree('dist/fitsharp/release.2.2.net.40.zip')
        into 'dist/fitsharp/'
    }
    delete 'dist/fitsharp/release.2.2.net.40.zip'
    file('dist/fitsharp/Runner.exe.config') << '<configuration><runtime><loadFromRemoteSources enabled="true"/></runtime></configuration>'
}

task bundle(type: Zip, dependsOn: [copyLocal, bundleFitsharp]) {
    description = 'creates the zip file for distributing dbfit'
    from 'dist'
    baseName 'dbfit-complete'
    version dbfitVersion 
}

task start(type: Exec, dependsOn: [copyLocal, bundleFitsharp]) {

    workingDir './dist'
    description = 'starts fitness with dbfit'
    executable '/bin/sh'
    args '-c', './startFitnesse.sh'
}

task fastbuild(dependsOn: [':dbfit-java:core:check', ':dbfit-java:derby:check'])

