package org.dbfit.greenpepper.fixture;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.dbfit.core.DBEnvironment;
import com.greenpepper.reflect.Fixture;
import com.greenpepper.reflect.Message;
import com.greenpepper.reflect.NoSuchMessageException;

import dbfit.util.DbParameterAccessor;
import dbfit.util.NameNormaliser;

public class InsertFixture implements Fixture{
	private List<DbParameterAccessor> accessors=new ArrayList<DbParameterAccessor>();

	private DBEnvironment dbEnvironment;
	private String tableOrViewName;
	private static final String ENTER_ROW="enterRow";
	private Map<String, DbParameterAccessor> allParams;
	public InsertFixture (DBEnvironment dbEnvironment, String tableName) throws SQLException{
		this.dbEnvironment=dbEnvironment;
		this.tableOrViewName=tableName;		
		allParams=	dbEnvironment.getAllColumns(tableName);
		if (allParams.isEmpty()){
			throw new SQLException("Cannot retrieve list of columns for "+tableName+" - check spelling and access rights");
		}
	}
	
	@Override
	public boolean canCheck(String message) {
		return true;
	}
	@Override
	public boolean canSend(String message) {
		return true;
	}

	public void buildInsertCommand() throws SQLException {
		statement= dbEnvironment.buildInsertPreparedStatement(
				tableOrViewName, accessors.toArray(new DbParameterAccessor[]{}));
		for (int i = 0; i < accessors.size(); i++) {
			accessors.get(i).bindTo(statement, i + 1);
		}
	}

	private DbParameterAccessor addNewAccessor(String name, int direction){
		String paramName= NameNormaliser.normaliseName(name);
		DbParameterAccessor accessor = allParams.get(paramName);			
		if (accessor==null){
			throw new NoSuchMessageException("Cannot find column "+paramName);
		}
		if (direction!=DbParameterAccessor.INPUT){
			accessor=dbEnvironment.createAutogeneratedPrimaryKeyAccessor(accessor);
		}
		accessors.add(accessor);
		return accessor;
	}
	// this will actually process the insert and populate output arguments

	private PreparedStatement statement;

	private void runRow()  throws SQLException{		
		statement.execute();
		statement.clearParameters();
	}

	
	private Message processRowMessage=new Message(){
		@Override
		public int getArity() {
			return 0;
		}
		@Override
		public Object send(String... args) throws Exception {
			runRow();
			return null;
		}
	};	
	@Override
	public Fixture fixtureFor(Object target) {
		throw new UnsupportedOperationException("not supported");
	}
	@Override
	public Object getTarget() {
		return this;
	}
	@Override
	public Message send(String message) throws NoSuchMessageException {
		final DbParameterAccessor a=addNewAccessor(message,DbParameterAccessor.INPUT);
		return new Message(){
			@Override
			public int getArity() {
				return 0;
			}
			@Override
			public Object send(String... args) throws Exception {
				a.set(args[0]);
				return null;
			}
		};
	}
	@Override
	public Message check(String message) throws NoSuchMessageException {
		if (ENTER_ROW.equals(message)){
			return processRowMessage;
		}
		throw new NoSuchMessageException("output args are not supported at the moment ("+message+")");
	}
	
}
