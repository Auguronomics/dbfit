package dbfit.util;


import java.lang.reflect.InvocationTargetException;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import fit.Fixture;
import fit.TypeAdapter;
/* this class addresses several issues with parsing, and is used as a base for any other dbfit type adapters:
 * 1: TypeAdapter does not check the parse delegates directly when parsing, it relies on appropriate delegate
 * 	being selected when adapter is created; this creates problems for dbfit adapters which need to delegate parsing
 *     to appropriate types, but access values from sql parameters etc
 *  2: this class encapsulates symbol access using <<
 *  3: some db drivers will return different numeric types for the same column depending on use (in view, autogenerated..);
 *  	this adapter tries to fix inconsistent types first by casting, then by parsing if needed
 * 
 */
public class DbParameterAccessorTypeAdapter extends TypeAdapter {	
	private DbParameterAccessor parameterAccessor;
	public DbParameterAccessorTypeAdapter(DbParameterAccessor accessor,Fixture f){
		this.fixture=f;
		this.type=accessor.type;
		this.parameterAccessor=accessor;		
	}
	@Override
	public Object get() throws IllegalAccessException,
			InvocationTargetException {
		return parameterAccessor.get();
	}
	@Override
	public void set(Object value) throws Exception {
		parameterAccessor.set(value);
	}
	@Override
	public Object parse(String s) throws Exception {
		return new ParseHelper(this.fixture,this.type).parse(s);
	}
}
